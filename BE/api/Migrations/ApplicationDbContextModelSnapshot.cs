// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActive");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("userName");

                    b.HasKey("Id")
                        .HasName("PK__Account__3213E83F806BD309");

                    b.HasIndex("IdentityUserId")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "UQ__Account__3213E83E33B4EFAC")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("api.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("questionId");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("score");

                    b.HasKey("Id")
                        .HasName("PK__Answer__3213E83F6E6AC687");

                    b.HasIndex("QuestionId");

                    b.HasIndex(new[] { "Id" }, "UQ__Answer__3213E83E564C8748")
                        .IsUnique();

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("api.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("api.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skintype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("api.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__Brand__3213E83F3D442866");

                    b.HasIndex(new[] { "Id" }, "UQ__Brand__3213E83ED24F6355")
                        .IsUnique();

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__Category__3213E83F729611B3");

                    b.HasIndex(new[] { "Id" }, "UQ__Category__3213E83EAE1518D6")
                        .IsUnique();

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("api.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("Id")
                        .HasName("PK__Comment__3213E83F99856583");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "Id" }, "UQ__Comment__3213E83EB508DD5A")
                        .IsUnique();

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("api.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("PK__Customer__3213E83FAF24D837");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "UQ__Customer__3213E83E3A954E6B")
                        .IsUnique();

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("api.Models.CustomerTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<bool>("IsLastest")
                        .HasColumnType("bit")
                        .HasColumnName("isLastest");

                    b.Property<int>("MainQuizId")
                        .HasColumnType("int")
                        .HasColumnName("mainQuizId");

                    b.Property<int>("SkinTypeId")
                        .HasColumnType("int")
                        .HasColumnName("skinTypeId");

                    b.HasKey("Id")
                        .HasName("PK__Customer__3213E83FD9E9DFC3");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainQuizId");

                    b.HasIndex("SkinTypeId");

                    b.HasIndex(new[] { "Id" }, "UQ__Customer__3213E83E8A24C5FC")
                        .IsUnique();

                    b.ToTable("CustomerTestResult", (string)null);
                });

            modelBuilder.Entity("api.Models.MainQuiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isActive");

                    b.HasKey("Id")
                        .HasName("PK__MainQuiz__3213E83FFBB84394");

                    b.HasIndex(new[] { "Id" }, "UQ__MainQuiz__3213E83E0DC34298")
                        .IsUnique();

                    b.ToTable("MainQuiz", (string)null);
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deliveryAddress");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("orderDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("paymentMethod");

                    b.Property<decimal>("ShippingFee")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("shippingFee");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totalPrice");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transactionId");

                    b.HasKey("Id")
                        .HasName("PK__Order__3213E83F883296A0");

                    b.HasIndex("CustomerId");

                    b.HasIndex(new[] { "Id" }, "UQ__Order__3213E83EF9659273")
                        .IsUnique();

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("api.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("unitPrice");

                    b.HasKey("Id")
                        .HasName("PK__OrderIte__3213E83F26D7FD96");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "Id" }, "UQ__OrderIte__3213E83E40886CC7")
                        .IsUnique();

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brandId");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("image");

                    b.Property<string>("Ingredient")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ingredient");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<decimal?>("Sale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("sale");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.HasKey("Id")
                        .HasName("PK__Product__3213E83F0D08AB86");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex(new[] { "Id" }, "UQ__Product__3213E83E2759CED2")
                        .IsUnique();

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("api.Models.ProductSkinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<int>("RecommentedLevel")
                        .HasColumnType("int")
                        .HasColumnName("recommentedLevel");

                    b.Property<int>("SkinTypeId")
                        .HasColumnType("int")
                        .HasColumnName("skinTypeId");

                    b.HasKey("Id")
                        .HasName("PK__ProductS__3213E83F99824F49");

                    b.HasIndex("ProductId");

                    b.HasIndex("SkinTypeId");

                    b.HasIndex(new[] { "Id" }, "UQ__ProductS__3213E83E612CDE1B")
                        .IsUnique();

                    b.ToTable("ProductSkinType", (string)null);
                });

            modelBuilder.Entity("api.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int>("SkinQuizId")
                        .HasColumnType("int")
                        .HasColumnName("skinQuizId");

                    b.HasKey("Id")
                        .HasName("PK__Question__3213E83F7EADEB24");

                    b.HasIndex("SkinQuizId");

                    b.HasIndex(new[] { "Id" }, "UQ__Question__3213E83EF7879E5B")
                        .IsUnique();

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("api.Models.SkinCareRoutine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("SkinTypeId")
                        .HasColumnType("int")
                        .HasColumnName("skinTypeId");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("PK__SkinCare__3213E83FFBC37F3B");

                    b.HasIndex("SkinTypeId");

                    b.HasIndex(new[] { "Id" }, "UQ__SkinCare__3213E83E28434439")
                        .IsUnique();

                    b.ToTable("SkinCareRoutine", (string)null);
                });

            modelBuilder.Entity("api.Models.SkinCareStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("RoutineId")
                        .HasColumnType("int")
                        .HasColumnName("routineId");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int")
                        .HasColumnName("stepOrder");

                    b.HasKey("Id")
                        .HasName("PK__SkinCare__3213E83FFA2FD6A0");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RoutineId");

                    b.HasIndex(new[] { "Id" }, "UQ__SkinCare__3213E83E71DA5401")
                        .IsUnique();

                    b.ToTable("SkinCareStep", (string)null);
                });

            modelBuilder.Entity("api.Models.SkinQuiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainQuizId")
                        .HasColumnType("int")
                        .HasColumnName("mainQuizId");

                    b.Property<int>("SkinElement")
                        .HasColumnType("int")
                        .HasColumnName("skinElement");

                    b.HasKey("Id")
                        .HasName("PK__SkinQuiz__3213E83F0917F69E");

                    b.HasIndex("MainQuizId");

                    b.HasIndex(new[] { "Id" }, "UQ__SkinQuiz__3213E83E42D15025")
                        .IsUnique();

                    b.ToTable("SkinQuiz", (string)null);
                });

            modelBuilder.Entity("api.Models.SkinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Characteristics")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("characteristics");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Symbol")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("PK__SkinType__3213E83F6E89766C");

                    b.HasIndex(new[] { "Id" }, "UQ__SkinType__3213E83EC754E20E")
                        .IsUnique();

                    b.ToTable("SkinType", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Account", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", "IdentityUser")
                        .WithOne("Account")
                        .HasForeignKey("api.Models.Account", "IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("api.Models.Answer", b =>
                {
                    b.HasOne("api.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK__Answer__question__1BC821DD");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("api.Models.Comment", b =>
                {
                    b.HasOne("api.Models.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Comment__custome__22751F6C");

                    b.HasOne("api.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__Comment__product__2180FB33");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("api.Models.Customer", b =>
                {
                    b.HasOne("api.Models.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("api.Models.Customer", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK__Customer__accoun__123EB7A3");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("api.Models.CustomerTestResult", b =>
                {
                    b.HasOne("api.Models.Customer", "Customer")
                        .WithMany("CustomerTestResults")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerT__custo__17F790F9");

                    b.HasOne("api.Models.MainQuiz", "MainQuiz")
                        .WithMany("CustomerTestResults")
                        .HasForeignKey("MainQuizId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerT__mainQ__1CBC4616");

                    b.HasOne("api.Models.SkinType", "SkinType")
                        .WithMany("CustomerTestResults")
                        .HasForeignKey("SkinTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerT__skinT__1DB06A4F");

                    b.Navigation("Customer");

                    b.Navigation("MainQuiz");

                    b.Navigation("SkinType");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.HasOne("api.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__customerI__1332DBDC");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("api.Models.OrderItem", b =>
                {
                    b.HasOne("api.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderItem__order__14270015");

                    b.HasOne("api.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderItem__produ__151B244E");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.HasOne("api.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK__Product__brandId__00200768");

                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Product__categor__160F4887");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("api.Models.ProductSkinType", b =>
                {
                    b.HasOne("api.Models.Product", "Product")
                        .WithMany("ProductSkinTypes")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductSk__produ__17036CC0");

                    b.HasOne("api.Models.SkinType", "SkinType")
                        .WithMany("ProductSkinTypes")
                        .HasForeignKey("SkinTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductSk__skinT__18EBB532");

                    b.Navigation("Product");

                    b.Navigation("SkinType");
                });

            modelBuilder.Entity("api.Models.Question", b =>
                {
                    b.HasOne("api.Models.SkinQuiz", "SkinQuiz")
                        .WithMany("Questions")
                        .HasForeignKey("SkinQuizId")
                        .IsRequired()
                        .HasConstraintName("FK__Question__skinQu__1AD3FDA4");

                    b.Navigation("SkinQuiz");
                });

            modelBuilder.Entity("api.Models.SkinCareRoutine", b =>
                {
                    b.HasOne("api.Models.SkinType", "SkinType")
                        .WithMany("SkinCareRoutines")
                        .HasForeignKey("SkinTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__SkinCareR__skinT__1EA48E88");

                    b.Navigation("SkinType");
                });

            modelBuilder.Entity("api.Models.SkinCareStep", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("SkinCareSteps")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__SkinCareS__categ__1F98B2C1");

                    b.HasOne("api.Models.SkinCareRoutine", "Routine")
                        .WithMany("SkinCareSteps")
                        .HasForeignKey("RoutineId")
                        .IsRequired()
                        .HasConstraintName("FK__SkinCareS__routi__208CD6FA");

                    b.Navigation("Category");

                    b.Navigation("Routine");
                });

            modelBuilder.Entity("api.Models.SkinQuiz", b =>
                {
                    b.HasOne("api.Models.MainQuiz", "MainQuiz")
                        .WithMany("SkinQuizzes")
                        .HasForeignKey("MainQuizId")
                        .IsRequired()
                        .HasConstraintName("FK__SkinQuiz__mainQu__19DFD96B");

                    b.Navigation("MainQuiz");
                });

            modelBuilder.Entity("api.Models.Account", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("api.Models.ApplicationUser", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SkinCareSteps");
                });

            modelBuilder.Entity("api.Models.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CustomerTestResults");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("api.Models.MainQuiz", b =>
                {
                    b.Navigation("CustomerTestResults");

                    b.Navigation("SkinQuizzes");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductSkinTypes");
                });

            modelBuilder.Entity("api.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("api.Models.SkinCareRoutine", b =>
                {
                    b.Navigation("SkinCareSteps");
                });

            modelBuilder.Entity("api.Models.SkinQuiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("api.Models.SkinType", b =>
                {
                    b.Navigation("CustomerTestResults");

                    b.Navigation("ProductSkinTypes");

                    b.Navigation("SkinCareRoutines");
                });
#pragma warning restore 612, 618
        }
    }
}
